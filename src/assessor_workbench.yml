---
- hosts: all
  name: Install and configure Assessor Workbench Docker composition
  become: yes
  become_method: ansible.builtin.sudo
  tasks:
    - name: Install Assessor Workbench
      ansible.builtin.include_role:
        name: assessor_workbench
      vars:
        assessor_workbench_bucket_name: "{{ build_bucket }}"
    - name: Pull in all Docker images needed for Assessor Workbench
      block:
        # Both steps in this block are needed in order to pull in all of the
        # images used by Assessor Workbench
        - name: Pull images with Assessor Workbench run.py
          ansible.builtin.command:
            chdir: "{{ assessor_workbench_dir }}"
            cmd: "{{ assessor_workbench_dir }}/run.py pull"
          changed_when: run_py_pull == 0
          failed_when: run_py_pull != 0
          register: run_py_pull
        # The community.docker.docker_compose module exists, but it
        # only supports docker-compose and not the Docker Compose
        # plugin (i.e., docker compose).  Ansible may offer more
        # up-to-date support for Docker compositions in the future.
        - name: Pull images from Assessor Workbench docker-compose.yml
          ansible.builtin.command:
            chdir: "{{ assessor_workbench_dir }}"
            cmd: docker compose pull
          changed_when: docker_compose_pull.rc == 0
          failed_when: docker_compose_pull.rc != 0
          register: docker_compose_pull
    # We use cloud-init scripts in cisagov/cool-assessment-terraform to
    # set Docker's backing file system to a persistent volume.  It would
    # cause problems if the Docker service were to start before cloud-init
    # finished, so we modify the Docker unit file to wait until cloud-final
    # has completed.  We include multi-user.service in here also to avoid
    # a systemd dependency cycle.
    - name: Ensure Docker starts after multi-user and cloud-final complete
      ansible.builtin.lineinfile:
        path: /lib/systemd/system/docker.service
        backrefs: yes
        # The exclamation mark forces us to quote the string because
        # it is a special character in YAML.
        #
        # The (?!...) jazz is a negative look-ahead assertion.  See
        # here, for example:
        # https://docs.python.org/3/library/re.html
        regexp: '^After=(.*)(?! multi\-user\.target cloud\-final\.service)$'
        line: After=\1 multi-user.target cloud-final.service
    - name: Create Assessor Workbench desktop shortcut for VNC user
      block:
        - name: Create VNC user Desktop directory
          ansible.builtin.file:
            path: /home/{{ vnc_username }}/Desktop
            state: directory
            mode: 0755
            owner: "{{ vnc_username }}"
            group: "{{ vnc_username }}"
        - name: Create Assessor Workbench desktop shortcut for VNC user
          ansible.builtin.copy:
            src: assessor-workbench-shortcut.desktop
            dest: >-
              /home/{{ vnc_username }}/Desktop/assessor-workbench-shortcut.desktop
            mode: 0755
            owner: "{{ vnc_username }}"
            group: "{{ vnc_username }}"
    # Add VNC user to docker group so that operators can successfully
    # execute docker compose commands.
    - name: Add VNC user to docker group
      ansible.builtin.user:
        append: yes
        groups:
          - docker
        name: "{{ vnc_username }}"
  vars:
    assessor_workbench_dir: /opt/assessor-workbench
    vnc_username: "{{ lookup('aws_ssm', '/vnc/username') }}"
